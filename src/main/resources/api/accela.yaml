openapi: 3.0.0
info:
  title: Accela Rest Composed Api doc
  version: 1.0.0
  description: Accela Rest Composed Api doc
servers:
  - url: 'localhost:8082'
tags:
  - name: Persons
  - name: Addresses
paths:
  /persons:
    get:
      tags:
        - Persons
      summary: A list of Persons
      responses:
        '200':
          description: A list of Persons
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonDTO'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: No Persons found.
        '500':
          $ref: '#/components/responses/UnexpectedError'
    post:
      tags:
        - Persons
      summary: Add a sigular Person
      requestBody:
        description: Body containing PersonDTO to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonDTO'
      responses:
        '200':
          description: Added PersonDTO response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDTO'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Endpoint not found.
        '500':
          $ref: '#/components/responses/UnexpectedError'
    put:
      tags:
        - Persons
      summary: Update Person data
      operationId: editPerson
      requestBody:
        description: Body containing PersonDTO to edit
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonDTO'
      responses:
        '200':
          description: Edited PersonDTO response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDTO'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Endpoint not found.
        '500':
          $ref: '#/components/responses/UnexpectedError'
  /persons/{id}:
    delete:
      tags:
        - Persons
      summary: Delete Person data
      operationId: deletePerson
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the Person to delete
      responses:
        '200':
          description: Successful operation
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /persons/{id}/appendAddresses:
    put:
      tags:
        - Persons
      summary: Append Addresses to Person data
      operationId: appendAddresses
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the Person to append the addresses to
      requestBody:
        description: Body containing Addresses collection to append to Person
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AddressDTO'
      responses:
        '200':
          description: Edited PersonDTO response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDTO'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /persons/count:
    get:
      tags:
        - Persons
      summary: Number of persons stored in the repository
      responses:
        '200':
          description: Number of persons
          content:
            application/json:
              schema:
                type: number
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: No Persons found.
        '500':
          $ref: '#/components/responses/UnexpectedError'
  /addresses/{id}:
    delete:
      tags:
        - Addresses
      summary: Delete Address data
      operationId: deleteAddress
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the Address to delete
      responses:
        '200':
          description: Successful operation
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  responses:
    NotFound:
      description: The specified resource was not found
    Unauthorized:
      description: Authorization information is missing or invalid
    UnexpectedError:
      description: Unexpected Error
      content:
        '*/*':
          schema:
            type: string
            description: Error message
  schemas:
    PersonDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: the ID of the Person
        firstName:
          type: string
          description: the First Name of the Person
        lastName:
          type: string
          description: the Last Name of the Person
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/AddressDTO'
    AddressDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        personId:
          type: string
          format: uuid
          description: Id of the parent Person
        street:
          type: string
          description: Street of the Address
        city:
          type: string
          description: City of the Address
        state:
          type: string
          description: State of the Address
        postalCode:
          type: string
          description: Postal Code of the Address
        
      

          
